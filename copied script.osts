{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook): string {\n  // Update the sheet name accordingly\n  let sourceWorksheet = workbook.getWorksheet(\"TEACHING - Pre start sem\");\n  let markingSheet = workbook.getWorksheet(\"Marking\");\n\n  // Find the last used row in column O\n  let lastRow = sourceWorksheet.getUsedRange().getLastRow();\n\n  // Get the range from O3 to the last used row in column O\n  let sourceRange = sourceWorksheet.getRange(\"O3:O\" + lastRow.getRowIndex());\n\n  // Get the range from N3 to the last used row in column N\n  let instructorIdRange = sourceWorksheet.getRange(\"N3:N\" + lastRow.getRowIndex());\n\n  // Get ranges for other columns\n  let schoolData = sourceWorksheet.getRange(\"AL3:AL\" + lastRow.getRowIndex());\n  let department = sourceWorksheet.getRange(\"A3:A\" + lastRow.getRowIndex());\n  let code = sourceWorksheet.getRange(\"B3:B\" + lastRow.getRowIndex());\n  let convenor = sourceWorksheet.getRange(\"S3:S\" + lastRow.getRowIndex());\n  let period = sourceWorksheet.getRange(\"E3:E\" + lastRow.getRowIndex());\n  let activity_code = sourceWorksheet.getRange(\"C3:C\" + lastRow.getRowIndex());\n  let duration = sourceWorksheet.getRange(\"L3:L\" + lastRow.getRowIndex());\n  let firstorrepeated = sourceWorksheet.getRange(\"U3:U\" + lastRow.getRowIndex());\n  let timetable = sourceWorksheet.getRange(\"P3:P\" + lastRow.getRowIndex());\n  let payrate = sourceWorksheet.getRange(\"V3:V\" + lastRow.getRowIndex());\n\n  // Store the data in variables\n  let copiedData = sourceRange.getValues();\n  let instructorIdData = instructorIdRange.getValues();\n  let school = schoolData.getValues();\n  let departmentData = department.getValues();\n  let unitData = code.getValues();\n  let convenorData = convenor.getValues();\n  let periodData = period.getValues();\n\n  // Teaching hours\n  let activity = activity_code.getValues();\n  let durationdata = duration.getValues();\n  let firstorrepeateddata = firstorrepeated.getValues();\n  let payratedata = payrate.getValues();\n  let timetabledata = timetable.getValues();\n\n  // Log success message\n  console.log(\"Data copied successfully.\");\n\n  // Combine all the data into a single array\n  let combinedData: string[][] = [];\n  copiedData.forEach((value, index) => {\n    // Check if any field is empty\n    if (\n      value[0] !== \"\" &&\n      instructorIdData[index][0] !== \"\" &&\n      school[index][0] !== \"\" &&\n      departmentData[index][0] !== \"\" &&\n      unitData[index][0] !== \"\" &&\n      convenorData[index][0] !== \"\" &&\n      periodData[index][0] !== \"\" &&\n      activity[index][0] !== \"\" &&\n      durationdata[index][0] !== \"\" &&\n      firstorrepeateddata[index][0] !== \"\" &&\n      timetabledata[index][0] !== \"\" &&\n      payratedata[index][0] !== \"\"\n    ) {\n      // Count the number of comma-separated values in the timetabledata\n      let timetableCount: string = timetabledata[index][0].toString().split(',').length.toString();\n\n      // Push the combined data along with the timetable count\n      combinedData.push([\n        value[0],\n        instructorIdData[index][0],\n        school[index][0],\n        departmentData[index][0],\n        unitData[index][0],\n        convenorData[index][0],\n        periodData[index][0],\n        activity[index][0],\n        firstorrepeateddata[index][0],\n        payratedata[index][0],\n        durationdata[index][0],\n        timetabledata[index][0],\n        timetableCount,\n        \"\", // Placeholder for divisionResult\n      ]);\n    }\n  });\n \n  // Iterate over rows in the \"Marking\" sheet starting from the 5th row\n  for (let i = 5; i <= markingSheet.getUsedRange().getLastRow().getRowIndex(); i++) {\n    // Assume column B, C, and I in the \"Marking\" sheet\n    let valueB = markingSheet.getRangeByIndexes(i - 1, 1, 1, 1).getText(); // Assuming column B\n    let valueC = markingSheet.getRangeByIndexes(i - 1, 2, 1, 1).getText(); // Assuming column C\n    let valueI = markingSheet.getRangeByIndexes(i - 1, 8, 1, 1).getText(); // Assuming column I\n\n    // Check if all values are empty in 'overall'\n    if (valueB === \"\" && valueC === \"\" && valueI === \"\") {\n      //console.log(\"All values are empty in 'overall'. Breaking the loop.\");\n      break;\n    }\n\n    // Create an array 'overall'\n    let overall = [valueB, valueC, valueI];\n    console.log(overall);\n\n    // Iterate over 'combinedData' array\n    for (let j = 0; j < combinedData.length; j++) {\n      if (\n        overall[0] === combinedData[j][6] &&\n        overall[1] === combinedData[j][4] &&\n        overall[2] === combinedData[j][0]\n      ) {\n        // If the conditions are met, perform the calculation\n        let markingj = parseFloat(markingSheet.getRangeByIndexes(i - 1, 9, 1, 1).getText()); // Assuming column K\n        console.log(combinedData.length);\n        console.log(markingj);\n\n        // Make sure you handle the case where inputdata[j][12] might be zero to avoid division by zero\n        let divisionResult = combinedData[j][11] !== 0 ? Math.floor(markingj / parseFloat(combinedData[j][11])) : 0;\n        //console.log(divisionResult);\n\n        // Update the 'divisionResult' in the 'combinedData' array\n        combinedData[j][13] = divisionResult;\n\n        // Now you have the result, you can use it as needed\n        //console.log(`Result for row ${i}: ${divisionResult}`);\n      }\n    }\n  }\n\n  // Return the combined data as JSON\n  let finalData = JSON.stringify(combinedData);\n\n  // Log the final data\n  console.log(finalData);\n\n  return finalData;\n}\n","description":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\"}}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}